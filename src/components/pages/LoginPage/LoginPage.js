import React from 'react';
import './LoginPage.css';
// import { withRouter } from 'react-router-dom';
import RoundedButton from '../../atoms/RoundedButton/RoundedButton';
import axios from 'axios';
// import {
//     userProfileSetUserId,
// } from '../../../redux/actions';
// import { connect } from 'react-redux';

import LoginLayout from '../../organisms/LoginLayout/LoginLayout';
import InputTwoFA from '../../atoms/InputTwoFA/InputTwoFA';
import LoginContainer from '../../atoms/LoginContainer/LoginContainer';
import InputFieldLogin from '../../atoms/InputFieldLogin/InputFieldLogin';
class LoginPage extends React.Component {

    constructor(props) {
        super(props);
        this.submiTwoFAtHandle = this.submiTwoFAtHandle.bind(this);
        this.submitCredentialsHandle = this.submitCredentialsHandle.bind(this);
        this.rotation = this.rotation.bind(this);
        this.state = {
            email: "",
            password: "",
            errors: "",
            emailConfirmationBackend: '',
            accountLoading: false,
            verifyLoading: false
        }
    }

    submitCredentialsHandle(e) {
        e.preventDefault();
        this.rotation();
        // this.setState({ accountLoading: true });
        // axios.post(process.env.REACT_APP_BACKEND_URL + '/users/login', {
        //     email: this.state.email,
        //     password: this.state.password
        // })
        //     .then(response => {
        //         this.setState({ accountLoading: false });
        //         this.rotation();
        //     })
        //     .catch((error) => {
        //         if (error.response.status === 401) {
        //             this.setState({ accountLoading: false });
        //             this.props.showErrorMessage(error.response.data.error.message);
        //         } else if (error.response.status === 422) {
        //             this.setState({ accountLoading: false });
        //             this.props.showErrorMessage(error.response.data.error.message);

        //         }
        //     });
    }
    submiTwoFAtHandle(e) {
        e.preventDefault();
        this.setState({ verifyLoading: true });
        axios.post(process.env.REACT_APP_BACKEND_URL + '/users/login1', {
            token: e.target.token.value
        })
            .then(response => {
                return axios.get(process.env.REACT_APP_BACKEND_URL + '/users/me')
            })
            .then(response => {
                // this.props.userProfileSetUserId(response.data.data.id);
                this.setState({ verifyLoading: false });
            })
            .catch((error) => {
                if (error.response.status === 401 || error.response.status === 422) {
                    this.props.showErrorMessage(error.response.data.error.message);
                }
                this.setState({ verifyLoading: false });
            });
    }


    changeEmail = (e) => {
        this.setState({
            email: e.target.value
        })
    }


    changePassword = (e) => {
        this.setState({
            password: e.target.value
        })

    }
    rotation() {
        document.getElementsByClassName('auth-page-container')[0].classList.toggle('flip');
    }

    render() {
        return (
            <LoginLayout>
                <div>
                    <LoginContainer>
                        <form onSubmit={this.submitCredentialsHandle}>
                            <InputFieldLogin type="email" changereduxdata={this.changeEmail} text={"Email"} placeholder="" value={this.props.email} maskChar={null} /> <br />
                            <InputFieldLogin type="password" changereduxdata={this.changePassword} text={"Password"} placeholder="" value={this.props.password} maskChar={null} />
                            <br />
                            <RoundedButton
                                loading={this.state.accountLoading}
                                style={{ display: 'block', margin: '0 auto', width: '150px' }}>
                                LOGIN
                            </RoundedButton>
                        </form>
                    </LoginContainer>
                </div>
                <div>
                    <LoginContainer>
                        <form onSubmit={this.submiTwoFAtHandle}>
                            <h1 style={{ fontSize: '24px', fontWeight: 600, lineHeight: '38px', textAlign: 'center' }}>2-Step Verification</h1>
                            <p style={{ fontSize: '16px', fontWeight: '300', lineHeight: '24px', textAlign: 'center' }}>Enter the verification code generated by your mobile application below.</p>
                            <InputTwoFA style={{ border: 0, borderBottom: '1px solid rgba(34,36,38,.15)', backgroundColor: 'transparent', boxShadow: 'none', borderRadius: 0, minHeight: 82, height: 82 }} errors={this.state.errors} tFaDesc={"Authentication code"} name="token" />
                            <br />
                            <RoundedButton loading={this.state.verifyLoading} style={{ display: 'block', margin: '0 auto', width: '150px' }}>
                                VERIFY
                            </RoundedButton>
                        </form>

                    </LoginContainer>
                </div>
            </LoginLayout>
        );
    }
}
export default LoginPage;

// const mapStateToProps = state => {
//     return {
//         userId: state.userProfile.userId,
//     }
// }

// const mapDispatchToProps = dispatch => {
//     return {
//         userProfileSetUserId: userId => dispatch(userProfileSetUserId(userId))
//     }
// }

// export default withRouter(connect(
//     mapStateToProps,
//     mapDispatchToProps
// )(LoginPage));